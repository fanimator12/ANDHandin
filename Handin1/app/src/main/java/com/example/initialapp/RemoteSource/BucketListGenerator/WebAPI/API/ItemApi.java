/**
 * Bucketlist API
 * This is a Python-Flask based RESTful API application that allows users to log and catalog all the stuff they want to accomplish before they expire  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.API;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.ApiException;
import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.ApiInvoker;
import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.Model.Item;
import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.Pair;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ItemApi {
  String basePath = "https://bucketlist-api1.herokuapp.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Deletes bucketlist items
  * 
   * @param id 
   * @param itemId 
   * @return void
  */
  public void bucketlistIdItemItemIdDelete (Integer id, Integer itemId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling bucketlistIdItemItemIdDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling bucketlistIdItemItemIdDelete"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdDelete",
        new ApiException(400, "Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdDelete"));
    }

    // create path and map variables
    String path = "/bucketlist/{id}/item/{item_id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "item_id" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes bucketlist items
   * 
   * @param id    * @param itemId 
  */
  public void bucketlistIdItemItemIdDelete (Integer id, Integer itemId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling bucketlistIdItemItemIdDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling bucketlistIdItemItemIdDelete"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdDelete",
        new ApiException(400, "Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdDelete"));
    }

    // create path and map variables
    String path = "/bucketlist/{id}/item/{item_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "item_id" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates bucketlist items
  * 
   * @param id 
   * @param itemId 
   * @param updatesBucketlistItem 
   * @return void
  */
  public void bucketlistIdItemItemIdPut (Integer id, Integer itemId, Item updatesBucketlistItem) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updatesBucketlistItem;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling bucketlistIdItemItemIdPut",
        new ApiException(400, "Missing the required parameter 'id' when calling bucketlistIdItemItemIdPut"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdPut",
        new ApiException(400, "Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdPut"));
    }
    // verify the required parameter 'updatesBucketlistItem' is set
    if (updatesBucketlistItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatesBucketlistItem' when calling bucketlistIdItemItemIdPut",
        new ApiException(400, "Missing the required parameter 'updatesBucketlistItem' when calling bucketlistIdItemItemIdPut"));
    }

    // create path and map variables
    String path = "/bucketlist/{id}/item/{item_id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "item_id" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates bucketlist items
   * 
   * @param id    * @param itemId    * @param updatesBucketlistItem 
  */
  public void bucketlistIdItemItemIdPut (Integer id, Integer itemId, Item updatesBucketlistItem, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updatesBucketlistItem;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling bucketlistIdItemItemIdPut",
        new ApiException(400, "Missing the required parameter 'id' when calling bucketlistIdItemItemIdPut"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdPut",
        new ApiException(400, "Missing the required parameter 'itemId' when calling bucketlistIdItemItemIdPut"));
    }
    // verify the required parameter 'updatesBucketlistItem' is set
    if (updatesBucketlistItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatesBucketlistItem' when calling bucketlistIdItemItemIdPut",
        new ApiException(400, "Missing the required parameter 'updatesBucketlistItem' when calling bucketlistIdItemItemIdPut"));
    }

    // create path and map variables
    String path = "/bucketlist/{id}/item/{item_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "item_id" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a bucketlist item
  * 
   * @param id 
   * @param createsABucketlistItem 
   * @return void
  */
  public void createItem (Integer id, Item createsABucketlistItem) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createsABucketlistItem;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling createItem",
        new ApiException(400, "Missing the required parameter 'id' when calling createItem"));
    }
    // verify the required parameter 'createsABucketlistItem' is set
    if (createsABucketlistItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createsABucketlistItem' when calling createItem",
        new ApiException(400, "Missing the required parameter 'createsABucketlistItem' when calling createItem"));
    }

    // create path and map variables
    String path = "/bucketlist/{id}/item".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a bucketlist item
   * 
   * @param id    * @param createsABucketlistItem 
  */
  public void createItem (Integer id, Item createsABucketlistItem, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createsABucketlistItem;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling createItem",
        new ApiException(400, "Missing the required parameter 'id' when calling createItem"));
    }
    // verify the required parameter 'createsABucketlistItem' is set
    if (createsABucketlistItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createsABucketlistItem' when calling createItem",
        new ApiException(400, "Missing the required parameter 'createsABucketlistItem' when calling createItem"));
    }

    // create path and map variables
    String path = "/bucketlist/{id}/item".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
