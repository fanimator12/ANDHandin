/**
 * Bucketlist API
 * This is a Python-Flask based RESTful API application that allows users to log and catalog all the stuff they want to accomplish before they expire  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI;

import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.Model.Auth;
import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.Model.Bucketlist;
import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.Model.Item;
import com.example.initialapp.RemoteSource.BucketListGenerator.WebAPI.Model.Reset;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Auth".equalsIgnoreCase(className)) {
      return new TypeToken<List<Auth>>(){}.getType();
    }
    
    if ("Bucketlist".equalsIgnoreCase(className)) {
      return new TypeToken<List<Bucketlist>>(){}.getType();
    }
    
    if ("Item".equalsIgnoreCase(className)) {
      return new TypeToken<List<Item>>(){}.getType();
    }
    
    if ("Reset".equalsIgnoreCase(className)) {
      return new TypeToken<List<Reset>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Auth".equalsIgnoreCase(className)) {
      return new TypeToken<Auth>(){}.getType();
    }
    
    if ("Bucketlist".equalsIgnoreCase(className)) {
      return new TypeToken<Bucketlist>(){}.getType();
    }
    
    if ("Item".equalsIgnoreCase(className)) {
      return new TypeToken<Item>(){}.getType();
    }
    
    if ("Reset".equalsIgnoreCase(className)) {
      return new TypeToken<Reset>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
